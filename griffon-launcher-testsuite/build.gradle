/*
 * Copyright 2010-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.codehaus.griffon.launcher.GriffonVersion

description: "A test harness for griffon-launcher that can run with multiple Griffon griffonVersions"

buildscript {
    repositories {
        flatDir name: 'griffon-launcher', dirs: "$projectDir/../griffon-launcher/build/libs"
    }
    dependencies {
        classpath ":griffon-launcher:latest.integration"
    }
}

apply plugin: 'groovy'
apply plugin: 'idea'

repositories {
    mavenLocal()
    flatDir name: 'griffon-launcher', dirs: "$projectDir/../griffon-launcher/build/libs"
    mavenCentral()
    mavenRepo name: 'Codehaus',       url: 'http://repository.codehaus.org'
    mavenRepo name: 'SpringSource',   url: 'http://repository.springsource.com/maven/bundles/release'
    mavenRepo name: 'Gradle',         url: 'http://gradle.artifactoryonline.com/gradle/libs-releases-local'
    mavenRepo name: 'Sonaytpe',       url: 'http://repository.sonatype.org/content/groups/public'
    mavenRepo name: 'Grails Central', url: 'http://repo.grails.org/grails/core/'
}

dependencies { 
    groovy "org.codehaus.groovy:groovy-all:1.8.6"
    testCompile ":griffon-launcher:latest.integration"
    testCompile "org.spockframework:spock-core:0.5-groovy-1.8"
}

task test (overwrite: true) {}

testWith '0.9.5-rc2'

def testWith(String... griffonVersions) {
    griffonVersions.each { griffonVersion ->

        def versionQuirks = new GriffonVersion(griffonVersion)
        
        def griffonBootstrapClasspathName = "griffonBootstrap-$griffonVersion"
        def griffonCompileClasspathName   = "griffonCompile-$griffonVersion"
        def griffonTestClasspathName      = "griffonTest-$griffonVersion"
        def griffonRuntimeClasspathName   = "griffonRuntime-$griffonVersion"

        def classpaths = [
            bootstrap: griffonBootstrapClasspathName,
            compile:   griffonCompileClasspathName, 
            test:      griffonTestClasspathName, 
            runtime:   griffonRuntimeClasspathName
        ]
        
        classpaths.each { type, config ->
            configurations.add(config) {
                description = "${type.capitalize()} Classpath for Griffon $griffonVersion"
            }
        }

        classpaths.bootstrapRuntime = "griffonBootstrapRuntime-$griffonVersion"
        configurations.add(classpaths.bootstrapRuntime) {
            description = "Bootstrap classpath for run-app and test-app"
            extendsFrom configurations."$classpaths.bootstrap", configurations."$classpaths.runtime"
        }
        
        dependencies {
            ["rt", "cli", "scripts", "resources"].each {
                delegate."$griffonBootstrapClasspathName" "org.codehaus.griffon:griffon-$it:${griffonVersion}"
            }
        
            delegate."$griffonRuntimeClasspathName" "org.codehaus.griffon:griffon-rt:${griffonVersion}"
            delegate."$griffonTestClasspathName" "org.codehaus.griffon:griffon-scripts:${griffonVersion}"
        }

        def testTaskName = "test-against-$griffonVersion"
        task (testTaskName, type: Test) {
            description = "Runs the test suite against Griffon $griffonVersion"
            testReportDir = file("${project.testReportDir}-$griffonVersion")
            testResultsDir = file("${project.testResultsDir}-$griffonVersion")
            
            ignoreFailures = true
            
            doFirst {
                def workspace = file("$buildDir/griffon-work/$griffonVersion")
                assert !workspace.exists() || workspace.deleteDir()
                assert workspace.mkdirs()
                
                def prefix = "griffon.launcher.testsuite"
                systemProperty "${prefix}.griffonVersion", griffonVersion
                systemProperty "${prefix}.workspace", workspace.absolutePath
                systemProperty 'griffon.cli.verbose', 'true'
                classpaths.each { type, config ->
                    systemProperty "${prefix}.classpath.$type", project.configurations."$config".files*.absolutePath.join(":")
                }
            }
        }
        
        tasks.test.dependsOn tasks.getByName(testTaskName)
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-6'
    jarFile = 'gradle/wrapper/gradle-wrapper.jar'
}